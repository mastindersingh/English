from flask import Flask, render_template_string
import requests
from requests.auth import HTTPBasicAuth

app = Flask(__name__)

def generate_url(cluster_identifier, endpoint):
    base_url = ""
    if "oxm" in cluster_identifier:
        if endpoint == "status":
            base_url = f"https://{cluster_identifier}-elasticsearch.net"
        elif endpoint == "health":
            base_url = f"https://{cluster_identifier}-api-elasticsearch.net"
    else:
        if endpoint == "status":
            base_url = f"https://{cluster_identifier}-elasticsearch..com"
        elif endpoint == "health":
            base_url = f"https://{cluster_identifier}-api-elasticsearch.com"

    return f"{base_url}/{endpoint}"

@app.route("/")
def home():
    # Credentials
    username = 'your_username'
    password = 'your_password'

    clusters = [f"oxm-prod{i}" for i in range(1, 3)] + [f"prod{i}" for i in range(1, 8)]
    results = []

    for cluster in clusters:
        cluster_type = "BCP" if "oxm" in cluster else "Prod"

        status_url = generate_url(cluster, "status")
        health_url = generate_url(cluster, "health")

        try:
            status_response = requests.get(status_url, auth=HTTPBasicAuth(username, password))
            health_response = requests.get(health_url, auth=HTTPBasicAuth(username, password))

            status_response.raise_for_status()
            health_response.raise_for_status()

            status_data = status_response.json()
            health_data = health_response.json()

            combined_data = {
                "cluster_identifier": cluster,
                "cluster_type": cluster_type,
                "name": status_data.get("name", "N/A"),
                "version": status_data.get("version", {}).get("number", "N/A"),
                "os_platform": status_data.get("metrics", {}).get("os", {}).get("platform", "N/A"),
                "apm_status": status_data.get("status", {}).get("plugins", {}).get("apm", {}).get("level", "N/A"),
                "cluster_name": health_data.get("cluster_name", "N/A"),
                "cluster_status": health_data.get("status", "N/A"),
                "number_of_nodes": health_data.get("number_of_nodes", "N/A"),
                "active_shards": health_data.get("active_shards", "N/A")
            }

            results.append(combined_data)
        except requests.RequestException as e:
            print(f"Error fetching data for cluster {cluster}: {e}")
        except KeyError as e:
            print(f"Key error: {e} in response data for cluster {cluster}")

    # HTML template with placeholders for data
    template = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Kibana, APM, and Cluster Health Status</title>
    </head>
    <body>
        <table border="1">
            <tr>
                <th>Cluster Identifier</th>
                <th>Cluster Type</th>
                <th>Instance Name</th>
                <th>Version</th>
                <th>OS Platform</th>
                <th>APM Service Status</th>
                <th>Cluster Name</th>
                <th>Cluster Status</th>
                <th>Number of Nodes</th>
                <th>Active Shards</th>
            </tr>
            {% for data in results %}
            <tr>
                <td>{{ data.cluster_identifier }}</td>
                <td>{{ data.cluster_type }}</td>
                <td>{{ data.name }}</td>
                <td>{{ data.version }}</td>
                <td>{{ data.os_platform }}</td>
                <td>{{ data.apm_status }}</td>
                <td>{{ data.cluster_name }}</td>
                <td>{{ data.cluster_status }}</td>
                <td>{{ data.number_of_nodes }}</td>
                <td>{{ data.active_shards }}</td>
            </tr>
            {% endfor %}
        </table>
    </body>
    </html>
    """

    # Render HTML with data
    return render_template_string(template, results=results)

if __name__ == "__main__":
    app.run(debug=True)
