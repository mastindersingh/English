# Python Project Packaging Guidelines (Wells Fargo)

## Overview

This document defines the standard packaging approach for Python projects within Wells Fargo using either `setuptools` or `poetry`.

---

## Option 1: Setuptools (`setup.cfg` + `pyproject.toml`)

### `setup.cfg`
```ini
[metadata]
name = wellsfargo_1pii_kpi_automation
version = 1.1.0
description = A Python project for KPI automation

[options]
packages = find:
install_requires =
    jira
    psycopg2-binary
    pymssql
    pytest
    pytest-cov
    coverage
zip_safe = True
include_package_data = True
python_requires = >=3.11

[options.package_data]
* = README.md

[options.packages.find]
where = .
```

### `pyproject.toml`
```toml
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
```

> ✅ Use this approach when using standard Jenkins or legacy CICD build tools.

---

## Option 2: Poetry-Only (`pyproject.toml`)

```toml
[tool.poetry]
name = "wellsfargo_1pii_kpi_automation"
version = "1.1.0"
description = "A Python project for KPI automation"
authors = ["K154844 <mastinder.singh@wellsfargo.com>"]
readme = "README.md"

packages = [
  { include = "kpi_automation" }
]

[[tool.poetry.source]]
name = "KPI_automation"
url = "https://artifactory-intg-b2.wellsfargo.net/artifactory/api"
priority = "primary"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
jira = "^3.4.0"
psycopg2-binary = "^2.9.5"
pymssql = "^2.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
```

> ✅ Use this if you manage dependencies with `poetry install`, `poetry lock`, and plan to deploy using Poetry pipelines.

---

## Important Notes

- **Do not mix** `setup.cfg` and `tool.poetry` in the same project.
- Maintain **semantic versioning** for easier artifact traceability.
- Always validate syntax (`toml-lint`, `poetry check`, or `python -m build`).

---

Would you like this Confluence content in downloadable `.md` or `.docx` format?







Workplace Experience Platform Services (WXPS) in Wells Fargo – Architecture and Functions

Introduction to WXPS in Enterprise Banking

Workplace Experience Platform Services (WXPS) – also referred to as Workforce Experience & Productivity Solutions (WxPS) – is a Wells Fargo enterprise platform focused on end-user computing and employee technology experience. In essence, WXPS serves as a central system of record (SOR) aggregating data about employees (“team members”), their devices, software, and related IT services ￼. By integrating with various enterprise systems, WXPS provides a unified view of workplace technology assets and enables analytics and reporting to improve employee experience. This platform is a catalyst for optimizing end-user computing, helping IT teams track hardware/software inventory, monitor endpoint health, and deliver insights on employee technology usage and needs.

Key functions of WXPS include:
	•	Data Aggregation: Collecting data from multiple sources (HR, device management, network, security tools, etc.) into a single repository.
	•	Integration: Seamlessly interfacing with enterprise software systems (HR databases, directory services, IT management tools) to ensure data consistency.
	•	Analytics & Reporting: Providing dashboards and reports (e.g. via MicroStrategy and Tableau) for insights into device inventory, software deployment, and employee endpoint analytics.
	•	Enhancing IT Services: Enabling proactive support (by identifying issues like outdated software or security non-compliance) and informed decision-making to improve the workplace tech environment.

Below, we break down the WXPS architecture and components as used in Wells Fargo, explaining each part of the system and how they work together.

High-Level Architecture Overview

At a high level, WXPS is implemented as a data platform that ingests information from numerous enterprise sources, processes and stores this data in structured databases, and then exposes the consolidated data for reporting and analysis. The architecture can be visualized as a pipeline: Data Sources → ETL/Utility Layer → Central Databases (SOR) → Analytics/Reporting Layer.

Figure: Context diagram of WXPS data flow – multiple enterprise data sources feed into the central TMT SOR (Team Member Technology System of Record), which in turn supplies data to enterprise reporting tools like MicroStrategy and Tableau.

In Wells Fargo’s WXPS context diagram (see figure above), the left side lists key data source systems that provide input to WXPS, feeding into a central hub labeled “TMT SOR” (Team Member Technology System of Record). The TMT SOR is the core database/repository in WXPS that consolidates all incoming data. On the right side, the diagram shows enterprise BI tools (MicroStrategy and Tableau) connected to the TMT SOR, indicating that these tools pull data from WXPS for reporting and dashboards. In essence, WXPS acts as a data warehouse for end-user computing data, integrating disparate sources and serving as the “single source of truth” for employee technology assets within the bank.

Let us now examine each part of this system in detail – the data sources feeding WXPS, the utility and integration layer that processes data, the databases that store the consolidated information, and the output/reporting mechanisms – along with how WXPS supports various enterprise functions.

Data Sources Feeding WXPS

WXPS gathers data from a wide range of enterprise systems. These include HR systems, IT asset management tools, device management platforms, directory services, and other infrastructure databases. In Wells Fargo’s environment, some of the main data sources integrated into WXPS (as depicted in the diagrams) are:
	•	PeopleSoft HR Data: The enterprise Human Resources system (PeopleSoft HCM) provides authoritative information on employees (team members). This includes employee IDs, department, manager, location, and role information which is critical for associating devices to specific users or organizational units. PeopleSoft HCM is a comprehensive HR management system that streamlines employee data management and workforce analytics ￼. By pulling HR data, WXPS can tie technical assets to individuals and org structures (e.g., to know which employee or department owns a given laptop).
	•	Active Directory (AD-ENT) and LDAP Directories: Active Directory Enterprise (AD-ENT) is the central directory service for user accounts and network assets. WXPS integrates with AD (likely via LDAP queries) to get data such as user login IDs, group memberships, device objects, and possibly email or NT login associations. This helps in correlating machine data with user accounts and verifying current status (e.g., if a user is active or terminated). Authentication and access controls for WXPS also rely on AD (more on this in security integration).
	•	LAN Central (Network Inventory): Lan Central is an internal system that likely contains network-related data – for example, mappings of devices (or ports) to network locations or IP addresses, and possibly office location information. Feeding this into WXPS allows the platform to determine where a device is connecting from (which site or network segment) and to help track assets geographically or within the network topology. (If an employee moves offices, or connects a device to the network, this data source could update location info in WXPS.)
	•	SCCM / Microsoft Endpoint Config Manager (MSCM): This represents Microsoft’s endpoint management system for Windows PCs (the diagram label “MSCM” likely refers to Microsoft System Center Configuration Manager or a similar tool). SCCM provides detailed hardware and software inventory for Windows endpoints, including installed software titles, versions, OS details, and hardware specifications. It also can supply software deployment status and patch levels. This data is crucial for WXPS’s software inventory function – ensuring the platform knows what software is installed where, and which devices might need updates. SCCM (now part of Microsoft Endpoint Manager) ensures security standards, maintains accurate inventory, and helps deploy software on all Windows devices ￼.
	•	JAMF Pro (Casper Suite): JAMF Pro (formerly called the Casper Suite) is the Apple device management platform used for macOS computers. It provides inventory data and management capabilities for Macs ￼. WXPS pulls data from JAMF to cover all Apple endpoints – this includes Mac hardware details, installed applications on Macs, macOS versions, compliance statuses, etc. By integrating JAMF data, WXPS achieves a full inventory of enterprise devices across both Windows and macOS environments.
	•	Symantec Management/Endpoint: Wells Fargo uses Symantec endpoint management/endpoint protection solutions on client machines. Symantec’s client management suite (formerly Altiris) runs an agent on each computer that automatically gathers inventory data (hardware, OS, installed software) whenever the agent is installed ￼. Additionally, Symantec Endpoint Protection provides security status (antivirus, encryption, etc.). WXPS ingests data from Symantec systems to incorporate security and compliance information about endpoints (e.g., antivirus status, encryption status, etc.). This helps in endpoint analytics, such as identifying machines without updated antivirus or seeing patterns in security incidents.
	•	HPDM (HP Device Manager) & WDM (Wyse Device Manager): These systems manage thin clients or special devices. HP Device Manager is used for HP thin clients, and Wyse Device Manager for Dell Wyse thin clients. They provide inventory and status of these devices. Integrating this data into WXPS allows the platform to account for all endpoint types (not just full PCs, but also thin clients used in branches or call centers).
	•	Controllers DataMart: This likely refers to an internal finance or asset “controllers” data mart. It might contain information about asset ownership, cost centers, depreciation, or financial tracking of equipment. By feeding this into WXPS, the platform can align technical inventory with financial records (e.g., confirming if a device is capitalized, who owns the budget for it, etc.). It could also mean data from “IT controllers” regarding compliance. (In summary, it supplies supplementary data about devices or users from a finance/control perspective.)
	•	PAC2000 / Remedy: PAC2000 is the Wells Fargo internal branding for the BMC Remedy IT Service Management system (as evidenced by employees referring to Remedy/PAC2000 tickets ￼). This system holds IT tickets, incident and request data. WXPS pulling from Remedy means it can incorporate service records – for example, when a device was last serviced, if a user has open IT issues, or records of software requests. This can enrich the WXPS data with lifecycle events (e.g., “Laptop X was requested via PAC2000 ticket #12345 and deployed on date Y”).
	•	Pharos Blueprint (Print Management): Pharos Blueprint is an on-premises print management solution for large enterprises ￼. It tracks printing activity (who printed, how many pages, which printer) and manages print devices. WXPS integrating Blueprint data provides insight into print usage patterns per user or device – an aspect of employee technology experience. For example, it can report how much an employee prints or identify costly printing behaviors, contributing to the overall workplace technology analytics.
	•	Other Data Sources: There may be additional feeds like “HRINV” (possibly HR inventory or a feed of HR changes), and other internal abbreviations (the context diagram had HPDM, WDM, AD-ENT already listed). In summary, any system that holds information about the workplace environment of employees – be it device, software, or user attribute – is a candidate data source for WXPS. By bringing these together, WXPS can present a 360° view of an employee’s technology footprint: their accounts, devices, software, network access, support tickets, and more.

Each of these sources typically provides data to WXPS on a scheduled basis (some daily, some near-real-time, depending on the nature of data and system capabilities). Next, we discuss how WXPS ingests and processes this data.

ETL Utility Layer – Data 

GET .monitoring-es-*/_search
{
  "query": {
    "bool": {
      "filter": [
        { "term": { "type": "node_stats" } },
        { "exists": { "field": "node_stats.breakers" } }
      ]
    }
  },
  "sort": [
    { "timestamp": { "order": "desc" } }
  ],
  "_source": ["timestamp", "node_stats.node_id", "node_stats.breakers"]
}


